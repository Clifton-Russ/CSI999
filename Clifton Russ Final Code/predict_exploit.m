function [shuffled_data, label_final, exploit_sum] = predict_exploit(a_size, days,vuln_controls,vuln_exploits, e_thresholds_daily, activity_idx, limit, reference)
%{

%% Merge all safeguard controls for activity 1
agent_idx = [];
vuln_activity = [];
for i = 1: a_size
    for j = 1: days
        [temp] = create_input(vuln_controls{i,j}(:,1), e_thresholds_daily{1,j}, activity_idx);
        temp2 = i*ones(size(temp,1),1);
        vuln_activity = [vuln_activity;temp];
        agent_idx = [agent_idx; temp2];
    end
end
%% Merge all exploits for activity 1
agent_idx = [];
vuln_exploits_merged = [];
for i = 1: a_size
    for j = 1: days
        [temp] = create_output(vuln_exploits{i,j}(:,1), e_thresholds_daily{1,j}, activity_idx);
        temp2 = i*ones(size(temp,1),1);
        vuln_exploits_merged = [vuln_exploits_merged;temp];
        agent_idx = [agent_idx; temp2];
    end
end
%% Determine the label
% This determines labels for each instance based on the number of failed
% controls (breaches)

temp = sum(vuln_exploits_merged,2);
label_temp = zeros(size(vuln_exploits_merged,1),1);

for i = 1: size(vuln_exploits_merged,1)
    if temp(i,1) == limit || temp(i,1) > limit
           label_temp(i,1) = 1;
    end
end
   

%% Combine the data
% This determines to whether to use the actual scores or breaches as input
if reference == 1
    combined_data = [ vuln_incidents label_temp];% incident binary
elseif reference == 2
    combined_data = [ vuln_activity label_temp];% vuln scores
end
%% Gather "True" instances
temp = 0;
true_data = [];
for i = 1: size(combined_data,1)
    if combined_data(i,size(combined_data,2)) ==1
        temp = temp +1;
        true_data(temp,:) = combined_data(i,:);
    end
end

%% Gather "False" instances
temp = 0;
false_data = [];
for i = 1: size(combined_data,1)
    if combined_data(i,size(combined_data,2)) == 0
        temp = temp +1;
        false_data(temp,:) = combined_data(i,:);
    end
end
%% Reduce both data sets
% This reduces the data sets to not exceed 200 rows 
clicked = size(true_data,1);
%if isempty(false_data) == 0 && isempty(true_data) == 0 
    true_data(201:end,:) = [];
    false_data(201:end,:)= [];

%% Combines the data sets


    combined_data2 = [true_data; false_data];
%% Shuffles the data
    shuffled_data = combined_data2(randperm(size(combined_data2, 1)), :);

%% Shuffles assigns the labels
    label_final = shuffled_data(:,size(shuffled_data,2));
%% Removes the label at the end of the data
    shuffled_data(:,end) = [];
%% Determine the clickrate
    opportunities = size(vuln_activity,1) *size(vuln_activity,2);
    click_rate_Scenario_3 = clicked/opportunities;


%}

%% Select input rows based on exploits
%This determines the index for each exploit
exploit_idx = cell(a_size,days);
for i = 1: a_size
    for j = 1:days
        exploit_idx{i,j} = Determine_exploit_idx(vuln_exploits{i,j},e_thresholds_daily{1,1},activity_idx);
    end
end
%% Merge input
input_binary_temp = cell(a_size, days);
input_control_temp = cell(a_size,days);
output_label_temp = cell(a_size, days);
%activity_idx =1;

for i = 1: a_size
    for j = 1:days
        [input_control_temp{i,j},input_binary_temp{i,j}, output_label_temp{i,j}] = merge_input(exploit_idx{i,j}, e_thresholds_daily{1,j}, vuln_exploits{i,j},vuln_controls{i,j}, activity_idx);
    end
end
  %%
input_binary = [];
input_control = [];
output_label = [];
for i = 1: a_size
    for j = 1:days
        input_binary = [ input_binary; cell2mat(input_binary_temp(i,j))];
        input_control = [input_control; cell2mat(input_control_temp(i,j))];
        output_label = [output_label; cell2mat(output_label_temp(i,j))];
    end
end
%% Compare Agent scores to control compliance scores
% For each control/element, if the agent score is greater than the
% control's compliance score, then there is an infraction. A single
% infraction does not mean there is an incident. 
compliance = .70;
threat_size = 1;
agent_threat = determine_agent_threat2(compliance, threat_size);
i_size = size(input_control,1);
e_size = size(input_control,2);
incident_test = zeros(i_size, e_size);
for i = 1: i_size
    for j = 1:e_size
        if agent_threat > input_control(i,j)
            incident_test(i,j) = 1;
        end
    end
end
%% Determines breach
click_rate_average = .043;
[input_breach] = determine_breach3(incident_test,click_rate_average);
%% Sum breaches
exploit_sum = sum(input_breach,2);
%% Determine labels

temp = sum(exploit_sum,2);
label_temp = zeros(size(exploit_sum,1),1);

for i = 1: size(exploit_sum,1)
    if temp(i,1) == limit || temp(i,1) > limit
        label_temp(i,1) = 1;
    end
end
%% Combine the data
% This determines to whether to use the actual scores or breaches as input
%reference = 1;
if reference == 1
    combined_data = [ input_binary label_temp];% incident binary
elseif reference == 2
    combined_data = [ input_control label_temp];% vuln scores
end
%% Gather "True" instances
temp = 0;
true_data = [];
for i = 1: size(combined_data,1)
    if combined_data(i,size(combined_data,2)) ==1
        temp = temp +1;
        true_data(temp,:) = combined_data(i,:);
    end
end

%% Gather "False" instances
temp = 0;
false_data = [];
for i = 1: size(combined_data,1)
    if combined_data(i,size(combined_data,2)) == 0
        temp = temp +1;
        false_data(temp,:) = combined_data(i,:);
    end
end
%% Reduce both data sets
% This reduces the data sets to not exceed 200 rows 
clicked = size(true_data,1);
sample_size = 200;
%if isempty(false_data) == 0 && isempty(true_data) == 0 
    true_data(sample_size+1:end,:) = [];
    false_data(sample_size+1:end,:)= [];
%% Combines the data sets
    combined_data2 = [true_data; false_data];
%% Shuffles the data
    shuffled_data = combined_data2(randperm(size(combined_data2, 1)), :);
%% Shuffles assigns the labels
    label_final = shuffled_data(:,size(shuffled_data,2));
%% Removes the label at the end of the data
    shuffled_data(:,end) = [];

%% Determine the clickrate
    %opportunities = size(vuln_activity,1) *size(vuln_activity,2);
    %click_rate_Scenario_3 = clicked/opportunities;


end